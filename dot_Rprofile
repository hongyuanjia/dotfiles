local({
    # set a CRAN mirror
    r <- getOption("repos")
    r["CRAN"] <- "https://mirrors.bfsu.edu.cn/CRAN/"
    options(repos = r)

    # unset R_LIBS_SITE and R_LIBS_USER if R is installed using scoop
    path_scoop_r <- normalizePath(file.path(Sys.getenv("USERPROFILE"), "scoop/apps/r/current"), "/", FALSE)
    if (normalizePath(Sys.getenv("R_HOME"), "/", FALSE) == path_scoop_r) {
        Sys.unsetenv("R_LIBS_SITE")
        Sys.unsetenv("R_LIBS_USER")
    }
})

.First <- function() {
    options(
        # use multiple cores
        Ncpus = parallel::detectCores() - 1L,
        datatable.print.class = TRUE,
        # default author name. change accordingly
        usethis.full_name = "Hongyuan Jia",
        # default values in the DESCRIPTION file. change accordingly
        usethis.description = list(
            "Authors@R" = utils::person(
                # default author name
                "Hongyuan", "Jia",
                # default author email
                email = "hongyuanjia@cqust.edu.cn",
                # default role, i.e. aut = author, cre = creator
                role = c("aut", "cre"),
                # default ORCID
                comment = c(ORCID = "0000-0002-0075-8183")
                ),
            # default license of the R code
            License = "MIT + file LICENSE",
            # default package initial version
            Version = "0.0.0.9000"
        )
    )

    # always use English
    if (.Platform$OS.type == "windows") {
        Sys.setenv(LANG = "en")
    } else {
        Sys.setenv(LANG = "en_US.UTF-8")
    }

    # use {pak} to handle package not found error
    if (interactive() && getRversion() >= "4.0.0") {
        globalCallingHandlers(
            packageNotFoundError = function(err) {
                try(pak::handle_package_not_found(err))
            }
        )
    }
}

.setup_pak <- function(update = FALSE) {
    repos <- sprintf(
        "https://r-lib.github.io/p/pak/devel/%s/%s/%s",
        .Platform$pkgType, R.Version()$os, R.Version()$arch
    )

    if (!update && !requireNamespace("pak", quietly = TRUE)) update <- TRUE

    if (update) install.packages("pak", repos = repos)
}

.set_proxy <- function(proxy = "127.0.0.1:7890") {
    Sys.setenv(https_proxy = paste0("http://", proxy))
    Sys.setenv(http_proxy = paste0("http://", proxy))
}

.compiledb <- function(pkg = ".", echo = TRUE) {
    # this approach only works with clang > v5.0
    if (Sys.which("clang") == "") stop("Failed to found 'clang' compiler")
    clangv <- system2("clang", "--version", stdout = TRUE)[1L]
    clangv <- regmatches(clangv, regexec("clang version (\\d+\\.\\d+)", clangv))[[1L]][[2]]
    if (numeric_version(clangv) <= 5.0) {
        stop("Requires a 'clang' compiler > v5.0, but v", clangv, " is found.")
    }

    # check if there is a src directory and a Makevars file
    if (!file.exists(file.path(pkg, "DESCRIPTION"))) {
        stop("Input 'pkg' seems not be an R package directory.")
    }
    if (!dir.exists(file.path(pkg, "src"))) {
        stop("Current R package did not contain a 'src' directory.")
    }
    exe <- if (.Platform$OS.type == "windows") ".exe" else ""

    # check if R_MAKEVARS_USER is set
    if (backup <- Sys.getenv("R_MAKEVARS_USER") != "") {
        # store the original value
        ori_makevars_user <- Sys.getenv("R_MAKEVARS_USER")
    }
    # create a temporary Makevars to make sure 'clang' is used to compile
    # R packages instead of G++ and apprend the '-MJ' flag
    makevars_user <- tempfile()
    Sys.setenv("R_MAKEVARS_USER" = makevars_user)
    if (backup) on.exit(Sys.setenv("R_MAKEVARS_USER" = ori_makevars_user), add = TRUE)

    # create a temporary directory to store the output JSON from clang
    dir_json <- tempfile("json-")
    dir.create(dir_json)

    writeLines(con = makevars_user, useBytes = TRUE,
        c(
            "CC=clang", "CXX=clang++", "CXX11=clang++", "CXX14=clang++",
            sprintf("PKG_CPPFLAGS+=-MJ \"%s\"", file.path(dir_json, "$@.json"))
        )
    )

    if (echo) message("=== Compiling the package using clang ===")
    system2(
        # get the rcmd path
        file.path(R.home("bin"), paste0("Rcmd", exe)),
        c("INSTALL", "-l", tempdir(), "--clean", "--preclean", pkg),
        stdout = if (echo) "" else NULL, stderr = if (echo) "" else NULL
    )

    # combine all JSON files into one
    file_json <- list.files(dir_json, full.names = TRUE)

    if (!length(file_json)) {
        message("No compilation databases generated.")
        return(NULL)
    }
    db <- c()
    for (f in file_json) {
        l <- readLines(f)
        l[length(l)] <- paste0(l[length(l)], ",")
        db <- c(db, readLines(f))
    }
    db[length(db)] <- substring(db[length(db)], 1L, nchar(db[length(db)]) - 1L)
    db <- c("[", db, "]")
    json <- file.path(pkg, "src/compile_commands.json")
    if (requireNamespace("jsonlite", quietly = TRUE)) {
        db <- jsonlite::toJSON(jsonlite::fromJSON(db), pretty = TRUE)
    }
    writeLines(db, json, useBytes = TRUE)
    normalizePath(json, mustWork = TRUE)
}

# custom start up
tryCatch(startup::startup(), error = function(ex) message(".Rprofile error: ", conditionMessage(ex)))

# vim: noai:ts=4:sw=4
